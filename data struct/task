Структуры данных

1. Задать конкретное дерево вроде такого:

1
2 3
21 22 34 35
43 46
62 66

с помощью типа данных:

data ATree a = ALeaf a | ABranch (ATree a) a (ATree a)
deriving (Show, Read)


Для него:

1.1 Вычислить сумму его вершин

1.2 Вывести список четных (по значению) вершин

1.3 Вывести список пар значений (вершина,систершип)

1.4 Вывести список всех поддеревьев вроде
[(ALeaf 62), (ALeaf 66), (ALeaf 21), .. (ABranch (ATree 62) 43 (ATree 64)), .. (само дерево)]

1.5 Назовем деревья подобными, если у них на одном этаже левые-правые вершины совпадают или симметрично поменялись местами.
Например, исходному дереву подобно такое:
1
2 3
22 21 35 34
46 43
62 66

задать предикат, устанавливающий подобие двух деревьев.

1.6 Сделать воплощение класса Eq для типа (ATree a) с использованием заданного выше подобия.


Далее, работа с Map-структурами. В начале файла-исходника удобно сделать импорт:

import qualified Data.List as L
import qualified Data.Map as M

2. По данным спискам
listName = ["Оля", "Женя", "Катя", "Женя", "Паша", "Саша", "Саша", "Маша", "Надя", "Юля"] :: [String]
listID = [131, 132, 134, 135, 136, 137, 138, 139, 140, 141] :: [Int]
listGender = [F, F, F, M, M, M, F, F, F, F] :: [Gender]
listAge = [17, 18, 17, 19, 18, 19, 21, 19, 18, 20] :: [Int]
listFrends = [True, False, True, False, False, True, False, True, True, False] :: [Bool]

составить Map-структуру (ассоциативный список) с ключами из множества listID и значениями вида
("Оля",F,17,True)

Для этого необходимо ввести тип данных Gender с конструкторами значений F и M.

2.1 Фактически, у нас получилась база данных на основе структуры Data.Map
Сделать из неё выборку всех юношей, сделать из неё выборку ключей, соответствующих этим юношам.
В качестве ответа вывести список пар (id,имя)

Удобнее всего использовать функцию Data.Map.filter

P.S. Для корректного вывода кириллицы в GHCI, добавить в файл (сам файл исходника должен быть в utf8)
такие волшебные строки:

{-# LANGUAGE FlexibleInstances #-}

instance {-# OVERLAPPING #-} Show String where
show x = ['"'] ++ x ++ ['"']

Либо имена должны быть на латинице: "Helga", "Alex", etc.
Проблема только в Windows, под Linux должно работать и так.
Под Mac -- не знаю.
